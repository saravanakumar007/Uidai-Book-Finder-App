// Mocks generated by Mockito 5.4.6 from annotations
// in uidai/test/domain/repositories/book_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:uidai/domain/entities/book.dart' as _i2;
import 'package:uidai/domain/repositories/book_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeBook_0 extends _i1.SmartFake implements _i2.Book {
  _FakeBook_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i3.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Book>> searchBooks(String? query, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#searchBooks, [query, page]),
            returnValue: _i4.Future<List<_i2.Book>>.value(<_i2.Book>[]),
          )
          as _i4.Future<List<_i2.Book>>);

  @override
  _i4.Future<_i2.Book> getBookDetails(_i2.Book? bookItem) =>
      (super.noSuchMethod(
            Invocation.method(#getBookDetails, [bookItem]),
            returnValue: _i4.Future<_i2.Book>.value(
              _FakeBook_0(this, Invocation.method(#getBookDetails, [bookItem])),
            ),
          )
          as _i4.Future<_i2.Book>);

  @override
  _i4.Future<List<_i2.Book>> getFavoriteBooks() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteBooks, []),
            returnValue: _i4.Future<List<_i2.Book>>.value(<_i2.Book>[]),
          )
          as _i4.Future<List<_i2.Book>>);

  @override
  _i4.Future<void> saveBook(_i2.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#saveBook, [book]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeBook(String? bookId) =>
      (super.noSuchMethod(
            Invocation.method(#removeBook, [bookId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> isBookFavorite(String? bookId) =>
      (super.noSuchMethod(
            Invocation.method(#isBookFavorite, [bookId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
